#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#      Filename:  project_euler_012.py
#
#   Description:  Project Euler, Problem 012
#
#       Created:  Sat 09 Jul 2011 02:02:27 PM ICT
# Last Modified:  Sun 10 Jul 2011 01:51:47 AM ICT
#
#        Author:  Thuan.D.T (MrTux)
#       Company:  Water Resources University (WRU)
#     Copyright:  (c) 2011, MrTux <mrtux@ubuntu-vn.org>

"""ProjectEuler, Problem 012

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?

"""

import time

__author__ = "Thuan.D.T (MrTux)"
__copyright__ = "Copyright (c) 2011 Thuan.D.T (MrTux)"
__credits__ = ["Thuan.D.T"]
__license__ = "GPLv2"
__version__ = "1.0.0"
__maintainer__ = "MrTux"
__email__ = "mrtux@ubuntu-vn.org"
__status__ = "Release"
__company__ = "Water Resources University (WRU)"

def triangle_number(n):
    return n*(n+1)/2

def number_divisors(n):
    count = 0
    i = 1
    while i <= n:
        if (n%i == 0):
            count += 1
        i += 1
    return count

def main(): # main
    start = time.time()

    n = 1
    result = 0
    while True:
        if (number_divisors(triangle_number(n)) > 500):
            result = triangle_number(n)
            break
        n += 1

    # Print Answer and Time Execute
    print "Answer : ", result
    print "Time   : ", str(time.time() - start)
    return 0

if __name__ == '__main__':
    print __doc__
    main()

